# -*- coding: utf-8 -*-
"""nearest_neighbor_task_allocation_problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KBnuKUzVWt6XrNaS04j88s-uDSmvQOhc
"""

import math

# Instancias do nosso problema

inf = math.inf

tempos_2 =  [
           [inf, inf, inf, inf, inf, inf, inf],
           [5, inf, 3, 9, 4, 2, 6],
           [3, 3, inf, 6, 2, 3, 5],
           [4, 9, 6, inf, 7, 2, 6],
           [7, 4, 2, 7, inf, 4, 8],
           [2, 2, 3, 3, 4, inf, 1],
           [1, 6, 5, 5, 8, 1, inf]
           ]

def vizinho_mais_proximo(tempos):

    # Subtraindo 1 para considerar o número real de tarefas
    n = len(tempos) - 1
    # Começando com a tarefa desejada
    # solucao = [1]
    # solucao = [4]
    solucao = [0]
    # Inicializa o vetor para acompanhar as tarefas já visitadas
    visitados = [False] * (n + 1)
    visitados[0] = True

    for _ in range(n):
        tarefa_atual = solucao[-1]
        tarefa_proxima = None
        menor_tempo = inf

        for tarefa in range(n + 1):
            if not visitados[tarefa] and tempos[tarefa_atual][tarefa] < menor_tempo:
                tarefa_proxima = tarefa
                menor_tempo = tempos[tarefa_atual][tarefa]

        if tarefa_proxima is not None:

            # Dando um append para adicionar a próx. tarefa no vetor solução
            solucao.append(tarefa_proxima)
            # Backup de tarefas já visitadas
            visitados[tarefa_proxima] = True

    # agora vamos calcular o custo das nossas tarefas
    def calcular_custo(tempos, solucao):
        custo_tarefas = 0

        for i in range(len(solucao) - 1):
            tarefa_atual = solucao[i]
            tarefa_proxima = solucao[i + 1]
            custo_tarefas += tempos[tarefa_atual][tarefa_proxima]

        custo_tarefas += tempos[solucao[-1]][0]  # Custo para retornar à tarefa 0

        return custo_tarefas

    custo_tarefas = calcular_custo(tempos, solucao)

    return solucao, custo_tarefas

# Vamos chamar nossos procedimentos
solucao_vizinho, custo_tarefas = vizinho_mais_proximo(tempos_2)

# Caso o custo for infinito teremos uma solução não viável
if custo_tarefas == inf:
    print("Solução Inviável - Custo Infinito")
else:
    print(f"Sequência de Tarefas Encontrada: {solucao_vizinho}")
    print()
    print(f"Custo das tarefas: {custo_tarefas}")

# Como testado acima no procedimento vizinho_mais_proximo comentando e descomentando o ínício das tarefas, temos as soluções :
# Iniciando na tarefa 1 (solucao = [1]) : Sequência de Tarefas Encontrada: [1, 5, 6, 2, 4, 1, 3] | Custo das tarefas: 27
# Iniciando na tarefa 4 (solucao = [4]) : Sequência de Tarefas Encontrada: [4, 2, 4, 1, 5, 6, 3] | Custo das tarefas: 20