# -*- coding: utf-8 -*-
"""random_solution_knapsack_problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lNC6c4hw92copnXEKz3Ld3N9yb2iMRGk
"""

# Importando as bibliotecas
import random
import math

# Vamos implementar um método para gerar uma solução aleatória para o problema da mochila
def solucao_aleatoria_mochila(n, peso, capacidade, beneficio):
    # Iniciando nosso vetor solução
    solucao = [0] * n
    peso_total = 0
    beneficio_total = 0

    while True:
        # Preenchendo nossa lista com os objetos aleatórios - utilizando a função random
        objeto_aleatorio = random.randint(0, n - 1)
        # Condição estabelecida para respeitar a capacidade da mochila
        if peso[objeto_aleatorio] + peso_total <= capacidade:
            solucao[objeto_aleatorio] = 1
            peso_total += peso[objeto_aleatorio]
            beneficio_total += beneficio[objeto_aleatorio]
        else:
            # Quando a capacidade for atingida o nosso while irá parar
            break

    return solucao , peso_total, beneficio_total

# Passando as novas instâncias
# No caso eu apenas repliquei as intâncias dadas no problema anterior
# Caso queira, as instâncias podem ser alteradas
n_2 = 8
beneficio_2 = [4, 3, 2, 6, 2, 3, 5, 4]
peso_2 = [5, 4, 3, 9, 4, 2, 6, 7]
capacidade_2 = 20

# Vamos chamar o nosso método
random_solucao, random_peso_total, random_beneficio = solucao_aleatoria_mochila(n_2, peso_2, capacidade_2, beneficio_2)
# Vamos exibir nossa Solução Final
print(f"Solução Final - Método Solução Aleatória : {random_solucao}\nPeso Total: {random_peso_total}\nBeneficio Total : {random_beneficio}")