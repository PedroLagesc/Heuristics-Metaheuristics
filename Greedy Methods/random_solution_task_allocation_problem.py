# -*- coding: utf-8 -*-
"""random_solution_task_allocation_problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TTKsZSBowKnpb-nIyTo3k3qIhhFh2ohL
"""

# Importando as bibliotecas
import random
import math

# Calculo do custo total das tarefas
def calc_custo(solve, tempos, n):

    custo_total = 0

    for i in range(n - 1):
        tarefa_anterior = solve[i - 1]
        tarefa_atual = solve[i]
        custo_total += tempos[tarefa_anterior][tarefa_atual]

    return custo_total


# Implementando o Método para gerar soluções aleatórias para o Problema de Alocação de Tarefas
def solucao_aleatoria_tasks(n):

    # Criando uma lista com todas as tarefas (1 a n), excluindo a tarefa 0
    tarefas = list(range(1, n))
    # Embaralhando aleatoriamente as tarefas com a shuffle
    random.shuffle(tarefas)
    # Adicionando a tarefa 0 no início e final da solução para fechar o nosso ciclo
    solucao_aleatoria = [0] + tarefas + [0]

    return solucao_aleatoria

# Passando as instancias do problema
inf = math.inf

tempos_random =  [
    [inf, inf, inf, inf, inf, inf, inf],
    [5, inf, 3, 9, 4, 2, 6],
    [3, 3, inf, 6, 2, 3, 5],
    [4, 9, 6, inf, 7, 2, 6],
    [7, 4, 2, 7, inf, 4, 8],
    [2, 2, 3, 3, 4, inf, 1],
    [1, 6, 5, 5, 8, 1, inf]
]

n_random = 7

random_tasks = solucao_aleatoria_tasks(n_random)
custo_random = calc_custo(random_tasks, tempos_random, n_random)

print(f"Solução Aleatória:{random_tasks}")
print()
print(f"Custo Total da Solução Aleatória: {custo_random}")